group = 'th.co.toyota'
version = '1.0.0-RELEASE'

buildscript {
    repositories {
        jcenter() 
    } 
} 

apply plugin: 'war'

description = 'GWRDS (Web) Application'

def moduleName=description
def vendorName='FTH'
def profileName=''

if(project.hasProperty('dev')){
	profileName='BW0-development(BWP)'
} else if(project.hasProperty('ift')){
	profileName='BW0-ift-jboss(BWS)'
}

println "Folder for copy correct config for ${profileName}"

task copyConfig1(type: Copy) {	
	from "src/server/${profileName}/resources/properties"
    into 'build/resources/main/properties'
    include '**/configuration.properties'
    include '**/data-access.properties'
}

task copyConfig2(type: Copy) {
    from "src/server/${profileName}/resources"
    into 'build/resources/main'
    include '**/logback.xml'
    include '**/datasource-config.xml'
    include '**/application-config.xml'
    include '**/sc2-client-java.properties'
}

task deleteFiles(type: Delete) {
    delete fileTree('build/resources/main') {
        include '**/offline-acl.xml'
        include '**/offline-user.xml'
    }
    delete "build/resources/main/META-INF"
}

dependencies {
    compile project(':bw0-api')
  	compile project(':bw0-batch')
  	
  	compile group: 'th.co.toyota.sc2.client', name: 'sc2-client-java', version:'1.0.15-RELEASE'
  	compile(group: 'org.springframework', name: 'spring-context', version:'3.2.4.RELEASE') {
		exclude(module: 'commons-logging')
    }
  	compile group: 'org.springframework', name: 'spring-webmvc', version:'3.2.4.RELEASE'
  	compile group: 'joda-time', name: 'joda-time', version:'2.1'
  	compile group: 'org.apache.camel', name: 'camel-spring', version:'2.12.2'
  	compile group: 'commons-fileupload', name: 'commons-fileupload', version:'1.3'
  	compile group: 'org.jdom', name: 'jdom2', version:'2.0.6'
  	compile group: 'org.apache.tiles', name: 'tiles-jsp', version:'2.2.2'
  	compile group: 'javax.servlet', name: 'jstl', version:'1.2'
  	
  	compile(group: 'com.github.dandelion', name: 'datatables-jsp', version:'0.9.1') {
		exclude(module: 'slf4j-api')
    }
    compile group: 'com.github.dandelion', name: 'datatables-export-itext', version:'0.9.1'
    compile group: 'com.github.dandelion', name: 'datatables-servlet2', version:'0.9.1'
    
  	providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'
  	providedCompile group: 'javax.servlet.jsp', name: 'jsp-api', version:'2.2'
  	
  	testCompile(group: 'org.springframework', name: 'spring-test', version:'3.2.4.RELEASE') {
		exclude(module: 'commons-logging')
    }
    testCompile group: 'junit', name: 'junit', version:'4.8.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.1'
    
    
/*    compile(group: 'th.co.toyota.st3.batch', name: 'st3-batch', version:'1.1.14-RELEASE') {
		exclude(module: 'jaxb-impl')
    }
    compile group: 'com.google.code.gson', name: 'gson', version:'2.3.1'
    
    compile group: 'org.apache.camel', name: 'camel-ftp', version:'2.12.2'
    compile group: 'org.apache.camel', name: 'camel-mail', version:'2.12.2'
    compile group: 'org.springframework', name: 'spring-web', version:'3.2.4.RELEASE'
    compile group: 'org.springframework', name: 'spring-webmvc', version:'3.2.4.RELEASE'
    compile group: 'org.springframework', name: 'spring-orm', version:'3.2.4.RELEASE'
    compile(group: 'org.springframework', name: 'spring-oxm', version:'3.2.4.RELEASE') {
		exclude(module: 'commons-lang')
    }
    
    compile group: 'javax.validation', name: 'validation-api', version:'1.1.0.Final'
    compile group: 'org.hibernate', name: 'hibernate-validator', version:'4.3.1.Final'
    
    compile group: 'cglib', name: 'cglib-nodep', version:'2.2'
    compile group: 'com.itextpdf', name: 'itextpdf', version:'5.5.0'
    
    compile group: 'commons-fileupload', name: 'commons-fileupload', version:'1.3'
	
	// https://mvnrepository.com/artifact/javax.mail/mail
	compile group: 'javax.mail', name: 'mail', version: '1.4.7'
	// https://mvnrepository.com/artifact/ch.qos.logback/logback-core
	compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.7'
	// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
	testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
	// https://mvnrepository.com/artifact/org.jboss.logging/jboss-logging
	compile group: 'org.jboss.logging', name: 'jboss-logging', version: '3.1.3.GA'
	// https://mvnrepository.com/artifact/commons-lang/commons-lang
	compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
	// https://mvnrepository.com/artifact/commons-codec/commons-codec
	compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
	
	
    testCompile(group: 'org.springframework', name: 'spring-test', version:'3.2.4.RELEASE') {
		exclude(module: 'commons-logging')
    }
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'
    
    providedCompile group: 'javax.xml.bind', name: 'jaxb-api', version:'2.2.7'
    providedCompile group: 'javax.el', name: 'el-api', version:'2.2'
    */
}

if( profileName == '' ){
}else{
	war.dependsOn copyConfig1, copyConfig2, deleteFiles
	
	war {
		manifest {
			 attributes(
			   (java.util.jar.Attributes.Name.IMPLEMENTATION_TITLE.toString()) : moduleName,
			   (java.util.jar.Attributes.Name.IMPLEMENTATION_VERSION.toString()): version,
			   (java.util.jar.Attributes.Name.IMPLEMENTATION_VENDOR.toString()): vendorName,
			   'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
			   'Build-Time': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
			   'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
	           'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
			   'Built-By': System.getProperty('user.name'),
			   'Built-On': "${InetAddress.localHost.hostName}/${InetAddress.localHost.hostAddress}",
			   "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
			   )
		  }
		excludes = ['WEB-INF/web.xml','WEB-INF/jboss-web.xml']
		webInf { from "src/server/${profileName}/WEB-INF" } // adds a file-set to the WEB-INF dir.
		metaInf { from "src/server/${profileName}/META-INF" } // adds a file-set to the META-INF dir.
	}
	
}
